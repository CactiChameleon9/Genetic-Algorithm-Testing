extends Node2D

export var bugs : int = 512
export var instructions : int = 500
export var min_movement : int = -10
export var max_movement : int = 10
export var mutate_percent : float = 0.20
export var time_factor : float = 12.0
export var goal_bonus : int = 400
export var last_best_ratio : float = 0.3
export var mutate_ratio : float = 0.6


var bug_scene = preload("res://Move towards goal (constant)/Bug.tscn")

var gen = 0
var gens

var fastestTimeSaid : bool = false

var current_dna

onready var goal_position = get_node("../Goal").position


func _ready() -> void:
	_init_bugs(bugs)


func _init_bugs(num):
	for i in num:
		
		var bug = bug_scene.instance()
		
		bug.connect("died", self, "_bug_finished")
		
		randomize()
		var dna = []
		if not current_dna:
			for j in instructions:
				dna.append(Vector2(rand_range(min_movement, max_movement), rand_range(min_movement, max_movement)))
		else:
			dna = current_dna[i]
		bug.dna = dna
		
		add_child(bug)


func _bug_finished(pos, time, dna, goal_met):
	
	var relative_pos = goal_position - pos
	#smaller the better
	var fitness = abs(relative_pos.x) + abs(relative_pos.y) - (time * time_factor)
	if goal_met:
		fitness -= goal_bonus
	
	if not fastestTimeSaid and goal_met:
		print("Fastest time: ", 2 - time)
		print("Fitness value: ", fitness)
		fastestTimeSaid = true
	
	gens[gen].append([fitness, dna])
	
	if len(gens[gen]) == bugs:
		_new_gen()


func _new_gen():
	
	fastestTimeSaid = false
	
	var best_bugs = []
	
	# we want the top 30% caried on to be used in the next generation
	for i in int(bugs * last_best_ratio):
		var found = 0
		for j in bugs:
			if (gens[gen][j][0] < gens[gen][found][0]) and not best_bugs.has(j):
				found = j
		best_bugs.append(found)
	
	
	print("GEN ", gen)
	gen += 1
	
	current_dna = []
	
	#add the top 30%
	for i in best_bugs:
		current_dna.append(gens[gen - 1][i][1])
	
	#add 60% mix of the top 30% (mutated)
	var min_bugs = 0
	var max_bugs = len(current_dna)
	for i in int(bugs * mutate_ratio):
		
		var dna1 = current_dna[int(rand_range(min_bugs, max_bugs))]
		var dna2 = current_dna[int(rand_range(min_bugs, max_bugs))]
		
		current_dna.append(_mutate_dna(_mix_dnas(dna1, dna2)))
	
	#add the rest random
	
	for i in bugs - len(current_dna):
		var dna = []
		for j in instructions:
			dna.append(Vector2(rand_range(min_movement, max_movement), rand_range(min_movement, max_movement)))
		current_dna.append(dna)
	
	_init_bugs(bugs)
	
	if gens[gen - 2]:
		gens[gen - 2] = []


func _mix_dnas(dna1, dna2):
#	var part1_length = int(len(dna1)/2)
#	var part2_length = len(dna2) - part1_length
#
#	var new_dna = []
#	for i in part1_length:
#		new_dna.append(dna1[i])
#
#	for i in part2_length:
#		new_dna.append(dna2[i])
	
	var new_dna = []
	for i in len(dna2):
		if i % 2 == 0:
			new_dna.append(dna1[i])
		elif i % 2 == 1:
			new_dna.append(dna2[i])
	
	return new_dna


func _mutate_dna(dna):
	#mutate x% of the dna
	for i in len(dna):
		if rand_range(0, 1) < mutate_percent:
			dna[i] = Vector2(rand_range(min_movement, max_movement), rand_range(min_movement, max_movement))
	
	return dna
